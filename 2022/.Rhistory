library(rworldmap)
library(dplyr)
library(gapminder)
library(magrittr)
library(sf)
library(rnaturalearth)
dfr <- map_data("world") %>% select(long, lat, region)
sfRegion <- st_as_sf(dfr, coords=c('long', 'lat'))
sfCountry <- ne_countries(returnclass='sf')
sfJoined <- st_join(sfCountry, sfRegion)
sfJoined
sfJoined <- st_join(sfCountry, sfRegion)
dfr <- map_data("world") %>% select(long, lat, region)
sfRegion <- st_as_sf(dfr, coords=c('long', 'lat'))
sfCountry <- ne_countries(returnclass='sf')
sfJoined <- st_join(sfCountry, sfRegion)
install.packages("geonames")
library(geonames)
GNcountryCode(lat, lng, lang = "", radius = "")
world
colnames(green)[1] <- "region"
merge(green, world, by = "region")
df <- merge(green, world, by = "region")
ggplot() +
geom_map(
data = world, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1
) +
geom_point(
data = df,
aes(long, lat)
)
ggplot() +
geom_map(
data = df, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1
) +
ggplot() +
geom_map(
data = df, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1
)
View(df)
df
ggplot() +
geom_map(
data = df, map = world,
aes(long, lat, map_id = region, fill = "Renewables....equivalent.primary.energy."),
color = "black", fill = "lightgray", size = 0.1
)
ggplot() +
geom_map(
data = df, map = world,
aes(long, lat, map_id = region, color = "Renewables....equivalent.primary.energy."),
color = "black", fill = "lightgray", size = 0.1
)
ggplot() +
geom_map(
data = df, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "Renewables....equivalent.primary.energy.", size = 0.1
)
ggplot() +
geom_map(
data = df, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1
)
ggplot() +
geom_map(
data = world, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1
)
library("rnaturalearth")
library("rnaturalearthdata")
world_map <- ne_countries(scale = "medium", returnclass = "sf")
ggplot(world_map)+
geom_sf()
ggplot(world_map)+
geom_sf(aes(fill = df$Renewables....equivalent.primary.energy.))
ggplot(df)+
geom_sf(aes(fill = Renewables....equivalent.primary.energy.))
ggplot() +
geom_map(
data = df, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1
)+
scale_fill_gradient()
ggplot() +
geom_map(
data = world, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1
)+
scale_fill_gradient()
ggplot() +
geom_map(
data = world, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1
)
ggplot() +
geom_map(
data = world, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1
)+
geom_map(data= df, map = world,
aes(fill= Renewables....equivalent.primary.energy.))
ggplot() +
geom_map(
data = world, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1
)+
geom_map(data= df, map = world,
aes(fill= Renewables....equivalent.primary.energy., map_id = region))
ggplot() +
geom_map(
data = world, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1
)+
geom_map(data= df, map = world,
aes(fill= Renewables....equivalent.primary.energy.,
map_id = region))+
coord_map("rectangular", lat0=0, xlim=c(-180,180), ylim=c(-60, 90)) +
scale_fill_continuous(low="thistle2", high="darkred", guide="colorbar") +
scale_y_continuous(breaks=c()) +
scale_x_continuous(breaks=c()) +
labs(fill="legend", title="Title", x="", y="") +
theme_bw()
ggplot() +
geom_map(
data = world, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1
)+
geom_map(data= df, map = world,
aes(fill= Renewables....equivalent.primary.energy.,
map_id = region))+
coord_map("rectangular", lat0=0, xlim=c(-180,180), ylim=c(-60, 90)) +
scale_fill_continuous(low="#e5fff2", high="#01ff80", guide="colorbar") +
scale_y_continuous(breaks=c()) +
scale_x_continuous(breaks=c()) +
labs(fill="legend", title="Title", x="", y="") +
theme_bw()
ggplot() +
geom_map(
data = world, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1
)+
geom_map(data= df, map = world,
aes(fill= Renewables....equivalent.primary.energy.,
map_id = region))+
coord_map("rectangular", lat0=0, xlim=c(-180,180), ylim=c(-60, 90)) +
scale_fill_continuous(low="#d6e7d5", high="#79b173", guide="colorbar") +
scale_y_continuous(breaks=c()) +
scale_x_continuous(breaks=c()) +
labs(fill="legend", title="Title", x="", y="") +
theme_bw()
ggplot() +
geom_map(
data = world, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1
)+
geom_map(data= df, map = world,
aes(fill= Renewables....equivalent.primary.energy.,
map_id = region))+
coord_map("rectangular", lat0=0, xlim=c(-180,180), ylim=c(-60, 90)) +
scale_fill_continuous(low="#3c5839", high="#", guide="colorbar") +
scale_y_continuous(breaks=c()) +
scale_x_continuous(breaks=c()) +
labs(fill="legend", title="Title", x="", y="") +
theme_bw()
ggplot() +
geom_map(
data = world, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1
)+
geom_map(data= df, map = world,
aes(fill= Renewables....equivalent.primary.energy.,
map_id = region))+
coord_map("rectangular", lat0=0, xlim=c(-180,180), ylim=c(-60, 90)) +
scale_fill_continuous(low="#3c5839", high="#", guide="colorbar") +
scale_y_continuous(breaks=c()) +
scale_x_continuous(breaks=c()) +
labs(fill="legend", title="Title", x="", y="")
ggplot() +
geom_map(
data = world, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1
)+
geom_map(data= df, map = world,
aes(fill= Renewables....equivalent.primary.energy.,
map_id = region))+
coord_map("rectangular", lat0=0, xlim=c(-180,180), ylim=c(-60, 90)) +
scale_fill_continuous(low="#3c5839", high="#", guide="colorbar")
ggplot() +
geom_map(
data = world, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1
)+
geom_map(data= df, map = world,
aes(fill= Renewables....equivalent.primary.energy.,
map_id = region))+
scale_fill_continuous(low="#3c5839", high="#", guide="colorbar")
ggplot() +
geom_map(
data = world, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1
)+
geom_map(data= df, map = world,
aes(fill= Renewables....equivalent.primary.energy.,
map_id = region))+
scale_fill_continuous(low="#3c5839", high="#", guide="colorbar")
library(geojsonio)
geojson_read("https://raw.githubusercontent.com/telegeography/www.submarinecablemap.com/master/web/public/api/v3/cable/cable-geo.json")
geojson_read("network/cable-geo.txt")
geojson_read("https://raw.githubusercontent.com/telegeography/www.submarinecablemap.com/master/web/public/api/v3/cable/cable-geo.json", what = "sp")
cable <- geojson_read("https://raw.githubusercontent.com/telegeography/www.submarinecablemap.com/master/web/public/api/v3/cable/cable-geo.json", what = "sp")
plot(cable)
library(rgeos)
library(sp)
library(rgeos)
library(rgdal)
library(ggmap)
library(ggplot2)
library(ggmap)
library(jsonlite)
cableDF <- fortify(cable)
ggplot(cableDF, aes(long, lat, group = group))+
geom_polygon(color = "white")
ggplot(cableDF, aes(long, lat, group = group))+
geom_curve(color = "white")
ggplot(cableDF, aes(long, lat, group = group))+
geom_map(color = "white")
ggplot(cableDF, aes(long, lat, group = group))+
geom_map(map = world, color = "white")
landing <- geojson_read("https://raw.githubusercontent.com/telegeography/www.submarinecablemap.com/master/web/public/api/v3/landing-point/landing-point-geo.json")
landingDF <- fortify(landing)
ggplot(landingDF, aes(long, lat, group = group))+
geom_polygon(color = "white")
landingDF <- fortify(landing)
landing <- geojson_read("https://raw.githubusercontent.com/telegeography/www.submarinecablemap.com/master/web/public/api/v3/landing-point/landing-point-geo.json")
landingDF <- fortify(landing)
landing <- geojson_read("https://raw.githubusercontent.com/telegeography/www.submarinecablemap.com/master/web/public/api/v3/landing-point/landing-point-geo.json", what = "sp")
landingDF <- fortify(landing)
landing <- geojson_read("https://raw.githubusercontent.com/telegeography/www.submarinecablemap.com/master/web/public/api/v3/landing-point/landing-point-geo.json", what = "sp")
landingDF <- fortify(landing)
read.csv("network/NYC_Transit_Subway_Entrance_And_Exit_Data.csv")
nyc_subway <- read.csv("network/NYC_Transit_Subway_Entrance_And_Exit_Data.csv")
View(nyc_subway)
library(tigris)
library(dplyr)
library(leaflet)
library(sp)
library(ggmap)
library(maptools)
library(broom)
library(httr)
library(rgdal)
ggmap(nyc_subway)
ggplot(nyc_subway, aes(Station.Longitude, Station.Latitude))+
geom_point()
ggplot(nyc_subway, aes(Station.Longitude, Station.Latitude))+
geom_line()
ggplot(nyc_subway, aes(Station.Longitude, Station.Latitude))+
geom_point()
ggplot(nyc_subway, aes(Station.Longitude, Station.Latitude))+
geom_point(color = Route1)
ggplot(nyc_subway, aes(Station.Longitude, Station.Latitude), color = Route1)+
geom_point()
ggplot(nyc_subway, aes(Station.Longitude, Station.Latitude, color = Route1))+
geom_point()
leaflet() %>%
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addProviderTiles("CartoDB.Positron")
nyc_map <- get_map(location = c(lon = -74.00, lat = 40.71), maptype = "terrain", zoom = 11)
?register_google
#read the Excel
library(readxl)
ave <- read_excel("lines/ave.xlsx")
lines <- read_excel("lines/lines_ave.xlsx")
#get mapSpain and codes
library(mapSpain)
prov <- esp_get_prov()
codelist <- mapSpain::esp_codelist
spain_prov <-ggplot(prov)+
geom_sf()
library(ggmap)
library(ggplot2)
library(ggthemes)
spain_map <- get_stamenmap(
bbox = c(left= -15.029, bottom = 32.064, right= 9.009, top= 46.210),
maptype = "terrain",
zoom = 6)
ggplot2::validate_mapping(mapping)
ggmap(spain_map)+
geom_point(ave,
mapping = aes(Long...3, Lat...2),
size = 2)
ggplot(spain_prov)+
geom_sf
ggplot(spain_prov)+
geom_sf()
spain_provSF <- fortify(spain_prov)
ggplot(spain_provSF)+
geom_sf()
spain_provSF <- fortify(spain_prov)
ggplot(spain_com)+
geom_sf()
View(lines)
points(x = lines$Longitude, y = lines$Latitude, col = "slateblue",
cex =3, pch =20)
ggplot(spain_com)+
geom_sf()+ points(x = lines$Longitude, y = lines$Latitude, col = "slateblue",
cex =3, pch =20)
ggplot(spain_com)+
geom_sf()+
plot.new()
points(x = lines$Longitude, y = lines$Latitude, col = "slateblue",
cex =3, pch =20)
ggplot(spain_com)+
geom_sf()+
plot.new()
points(x = lines$Longitude, y = lines$Latitude, col = "slateblue",
cex =3, pch =20)
points(x = lines$Longitude, y = lines$Latitude, col = "slateblue",
cex = 10, pch =20)
points(x = lines$Longitude, y = lines$Latitude, col = "slateblue",
cex = 3, pch =20)
points(x = lines$Longitude, y = lines$Latitude, col = "slateblue", cex = 3, pch =20)
ggplot(spain_com)+
geom_sf()+ points(x = lines$Longitude, y = lines$Latitude, col = "slateblue", cex = 3, pch =20)
library(ggrepel)
ggplot() +
geom_polygon(data = spain_com, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data= lines, aes(x= Longitude, y= Latitude))
ggplot(spain_com) +
geom_sf() +
geom_point(data= lines, aes(x= Longitude, y= Latitude))
ggplot(spain_com) +
geom_sf() +
geom_point(data= lines, aes(x= Longitude, y= Latitude,
lims_method = "geometry_bbox"))
ggplot(spain_com) +
geom_sf() +
geom_point(data= lines, aes(x= Longitude, y= Latitude),
lims_method = "geometry_bbox")
ggplot(spain_com) +
geom_sf(lims_method = "geometry_bbox") +
geom_point(data= lines, aes(x= Longitude, y= Latitude))
ggplot(spain_com) +
geom_sf(coord_sf(lims_method = "geometry_bbox")) +
geom_point(data= lines, aes(x= Longitude, y= Latitude))
library(maps)
sp <- map_data("world") %>% filter(region == "Spain")
ggplot()+
geom_polygon(sp, aes(long, lat, group = group), fill = "grey", alpha =.3)+
geom_point(lines, aes(Longitude, Latitude))
ggplot()+
geom_polygon(sp, aes(long, lat, group = group), fill = "grey", alpha =.3)+
geom_point(lines, mapping = aes(Longitude, Latitude))
ggplot()+
geom_polygon(sp, aes(long, lat, group = group), fill = "grey", alpha =.3)
ggplot(sp)+
geom_polygon(sp, aes(long, lat, group = group), fill = "grey", alpha =.3)
ggplot(sp, aes(long, lat, group = group), fill = "grey", alpha =.3)+
geom_polygon()
ggplot(sp, aes(long, lat, group = group), fill = "grey", alpha =.3)+
geom_polygon()+
geom_point(lines, mapping = aes(Longitude, Latitude))
ggplot(sp, aes(long, lat), fill = "grey", alpha =.3)+
geom_polygon()
ggplot(sp, aes(long, lat, group = group), fill = "grey", alpha =.3)+
geom_polygon()
ggplot(sp, aes(long, lat, group = group), fill = "grey", alpha =.3)+
geom_polygon()+
geom_point(lines, mapping = aes(Longitude, Latitude))
ggplot(sp, aes(long, lat, group = group), fill = "grey", alpha =.3)+
geom_polygon()+
geom_point(lines, mapping = aes(Longitude, Latitude), inherit.aes = FALSE)
ggplot(sp, aes(long, lat, group = group), fill = "grey", alpha =.3, inherit.aes = FALSE)+
geom_polygon()+
geom_point(lines, mapping = aes(Longitude, Latitude))
ggplot(sp, aes(long, lat, group = group), fill = "grey", alpha =.3)+
geom_polygon(inherit.aes = FALSE)+
geom_point(lines, mapping = aes(Longitude, Latitude))
ggplot(sp, aes(long, lat, group = group), fill = "grey", alpha =.3)+
geom_polygon()+
geom_point(lines, mapping = aes(Longitude, Latitude), inherit.aes = FALSE)
ggplot(sp, aes(long, lat, group = group), fill = "grey", alpha =.3)+
geom_polygon()+
geom_point(lines, mapping = aes(Longitude, Latitude), inherit.aes = FALSE)+
scale_x_continuous(limits = c(0, 15))
ggplot(sp, aes(long, lat, group = group), fill = "grey", alpha =.3)+
geom_polygon()+
geom_point(lines, mapping = aes(Longitude, Latitude), inherit.aes = FALSE)+
scale_x_continuous(limits = c(0, 15)) +
scale_y_continuous(limits = c(0, 7))
spotify <- read.csv("music/SpotifyTopSongsByCountry - May 2020.csv")
View(spotify)
library(mapdata)
library(tidyverse)
library(ggplot2)
world <- map_data("world")
world
colname(spotify)[1] <- "region"
colnames(spotify)[1] <- "region"
df <- merge(spotify, world, by = "region")
df %>% filter(Rank == 1)
df_1 <- df %>% filter(Rank == 1)
ggplot()+
geom_map(data = world, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = .2)+
geom_map(data = df_1, map = world,
aes(fill = Rank, map_id = region))
ggplot()+
geom_map(data = world, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = .2)+
geom_map(data = df_1, map = world,
aes(fill = Rank, map_id = region))+
scale_fill_ordinal()
eurovision <- read.csv("music/contestants.csv")
View(eurovision)
library(tidyr)
library(dplyr)
eurovision %>% filter(place_final == 1)
winners <- eurovision %>% filter(place_final == 1)
View(winners)
unique(to_country)
unique(winners$to_country)
library(readxl)
donors <- read_xlsx("11_red/GODT_downloads.xlsx")
View(donors)
blood <- read_xlsx("11_red/csvData.csv")
blood <- read.csv("11_red/csvData.csv")
View(blood)
library(mapdata)
library(rnaturalearth)
library(rnaturalearthdata)
world <- ne_countries(scale = "medium", returnclass = "sf")
library(ggplot2)
library(ggplot2)
ggplot(world)+
geom_sf()
ggplot(world)+
geom_sf(aes(fill = blood))
spotify <- read.csv("music/SpotifyTopSongsByCountry - May 2020.csv")
spotify <- read.csv("27_music/SpotifyTopSongsByCountry - May 2020.csv")
library(tidyverse)
library(ggplot2)
library(ggplot2)
world <- map_data("world")
colnames(spotify)[1] <- "region"
df <- merge(spotify, world, by = "region")
df_1 <- df %>% filter(Rank == 1)
ggplot()+
geom_map(data = world, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = .2)+
geom_map(data = df_1, map = world,
aes(fill = Rank, map_id = region))+
scale_fill_ordinal()
eurovision <- read.csv("contestants.csv")
library(tidyr)
library(dplyr)
winners <- eurovision %>% filter(place_final == 1)
View(winners)
total_winner <- winners[, -c(6:9)]
total_winner <- total_winner[, -c(8:15)]
by_country <- group_by(winners, to_country) %>%
summarise(sum(place_final), n = n())
eu_color <- c("#764FFF", "#F793FF", "#91FA41", "#CCB990", "#48FAB4",
"#FADE41", "#F5F4FF")
library(sf)
library(giscoR)
# Obtenemos todos los países y transformamos al mismo CRS
paises <- gisco_get_countries(year = año_ref,
resolution = 20) %>%
st_transform(3035)
# Obtenemos todos los países y transformamos al mismo CRS
paises <- gisco_get_countries(resolution = 20) %>%
st_transform(3035)
# Gráfico
choro_adv <- ggplot() +
# Primera capa con todos los países
geom_sf(data = paises, fill = "grey80", color = NA) +
# Establece límites
xlim(c(2200000, 7150000)) +
ylim(c(1380000, 5500000))
choro_adv
View(by_country)
choro_adv +
geom_sf(by_country, aes(fill = n), color = NA)
choro_adv +
geom_sf(by_country, aes(fill = sum(place_final)), color = NA)
